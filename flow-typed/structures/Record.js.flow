// @flow

import type {JsonSerializable} from "../interfaces/JsonSerializable.js";
import type {Equatable} from "../interfaces/Equatable.js";
import type {Hashable} from "../interfaces/Hashable.js";
import {isValidSymbol} from "../util/symbol.js";
import ObjectUtil from "../util/object_util.js";
import hash, {asHashable} from "../util/hash.js";
import env from "../util/env.js";
declare interface Class0 {

  hash(): string;
}
declare interface Class1 {

  equals(other: Class0): boolean;
}
declare interface Class2 {

  toJSON(): any;
}
declare export default class<T: {[_: string]: any}> implements Class0, Class1, Class2 {

  properties: T;
  constructor(properties: mixed /* UNEXPECTED TYPE: ExistsT */): void;
  equals(other: Class0): boolean;
  get(propertyName: string): any;
  has(propertyName: string): boolean;
  hash(): string;
  size(): number;
  toJSON(): {[_: string]: any} | {[_: string]: mixed /* UNEXPECTED TYPE: EmptyT */};
}

