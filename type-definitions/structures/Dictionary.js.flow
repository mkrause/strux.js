// @flow

import type {JsonSerializable} from "../interfaces/JsonSerializable.js";
import type {Equatable} from "../interfaces/Equatable.js";
import type {Hashable} from "../interfaces/Hashable.js";
import {isValidSymbol} from "../util/symbol.js";
import MapUtil from "../util/map_util.js";
import hash, {asHashable} from "../util/hash.js";
import env from "../util/env.js";
declare interface Class0 {

  hash(): string;
}
declare interface Class1 {

  equals(other: Class0): boolean;
}
declare interface Class2 {

  toJSON(): any;
}
declare export default class<A: number | string | Class0 & Class1 & Class2> implements Class0, Class1, Class2 {

  entries: Map<string, A>;
  constructor(entries: Map<string, A> | {+[_: string]: A}): void;
  equals(other: Class0): boolean;
  get(entryName: string): ?A;
  has(entryName: string): boolean;
  hash(): string;
  map<B: number | string | Class0 & Class1 & Class2>(fn: (_: A, _: ?string) => B): default<B>;
  size(): number;
  toJSON(): {[_: string]: A};
}

